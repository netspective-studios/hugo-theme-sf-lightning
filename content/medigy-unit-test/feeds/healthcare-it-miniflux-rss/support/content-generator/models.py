from peewee import (  # type: ignore
    Model,
    DateTimeField,
    DateField,
    DoubleField,
    TextField,
    IntegerField,
    BigIntegerField,
    CharField,
    BooleanField,
    SQL,
    ForeignKeyField,
    DeferredForeignKey,
    DatabaseProxy,
    BigAutoField,
    BlobField,
    CompositeKey,
)
from playhouse.db_url import connect  # type: ignore
from playhouse.postgres_ext import HStoreField, TSVectorField  # type: ignore
from typing import Dict

# NOTE: Most of the models below were generated by the PeeWee pwiz model generator utility.
#       The Miniflux schema does define most native primary keys and foreign keys in the DDL
#       so not much editing was required (just some unknown fields were redefined).


class BaseModel(Model):
    class Meta:
        database = DatabaseProxy()

    @staticmethod
    def open_database(source_db_url: str) -> None:
        # source_db_url is something like postgresql://miniflux:PASSWORD@192.168.2.23:5438/miniflux
        BaseModel._meta.database.initialize(connect(source_db_url))

    @staticmethod
    def close_database() -> None:
        BaseModel._meta.database.close()


class User(BaseModel):
    id = BigAutoField(primary_key=True)
    extra = HStoreField(index=True, null=True)
    is_admin = BooleanField(constraints=[SQL("DEFAULT false")], null=True)
    keyboard_shortcuts = BooleanField(constraints=[SQL("DEFAULT true")], null=True)
    language = TextField(constraints=[SQL("DEFAULT 'en_US'::text")], null=True)
    last_login_at = DateTimeField(null=True)
    password = TextField(null=True)
    theme = TextField(constraints=[SQL("DEFAULT 'light_serif'::text")], null=True)
    timezone = TextField(constraints=[SQL("DEFAULT 'UTC'::text")], null=True)
    username = TextField(unique=True)

    class Meta:
        table_name = "users"


class Category(BaseModel):
    id = BigAutoField(primary_key=True)
    title = TextField()
    user = ForeignKeyField(column_name="user_id", field="id", model=User, backref="categories")

    class Meta:
        table_name = "categories"
        indexes = ((("user", "title"), True),)


class Feed(BaseModel):
    id = BigAutoField(primary_key=True)
    category = ForeignKeyField(
        column_name="category_id", field="id", model=Category, backref="feeds"
    )
    checked_at = DateTimeField(constraints=[SQL("DEFAULT now()")], null=True)
    crawler = BooleanField(constraints=[SQL("DEFAULT false")], null=True)
    disabled = BooleanField(constraints=[SQL("DEFAULT false")], null=True)
    etag_header = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    feed_url = TextField()
    last_modified_header = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    parsing_error_count = IntegerField(constraints=[SQL("DEFAULT 0")], null=True)
    parsing_error_msg = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    password = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    rewrite_rules = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    scraper_rules = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    site_url = TextField()
    title = TextField()
    user_agent = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    user = ForeignKeyField(column_name="user_id", field="id", model=User, backref="feeds")
    username = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)

    class Meta:
        table_name = "feeds"
        indexes = (
            (("user", "category"), False),
            (("user", "feed_url"), True),
        )


class UserEntry(BaseModel):
    id = BigAutoField(primary_key=True)
    user = ForeignKeyField(column_name="user_id", field="id", model=User, backref="entries")
    author = TextField(null=True)
    comments_url = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    content = TextField(null=True)
    document_vectors = TSVectorField(index=True, null=True)
    feed = ForeignKeyField(column_name="feed_id", field="id", model=Feed, backref="entries")
    hash = TextField()
    published_at = DateTimeField()
    starred = BooleanField(constraints=[SQL("DEFAULT false")], null=True)
    title = TextField()
    url = TextField()

    class Meta:
        table_name = "entries"
        indexes = (
            (("feed", "hash"), True),
            (("status", "user"), False),
        )


class Enclosure(BaseModel):
    id = BigAutoField(primary_key=True)
    entry = ForeignKeyField(column_name="entry_id", field="id", model=UserEntry)
    mime_type = TextField(constraints=[SQL("DEFAULT ''::text")], null=True)
    size = BigIntegerField(constraints=[SQL("DEFAULT 0")], null=True)
    url = TextField()
    user = ForeignKeyField(column_name="user_id", field="id", model=User)

    class Meta:
        table_name = "enclosures"


class Icon(BaseModel):
    id = BigAutoField(primary_key=True)
    hash = TextField(unique=True)
    mime_type = TextField()
    content = BlobField()

    class Meta:
        table_name = "icons"


class FeedIcon(BaseModel):
    feed = ForeignKeyField(column_name="feed_id", field="id", model=Feed, backref="icons")
    icon = ForeignKeyField(column_name="icon_id", field="id", model=Icon)

    class Meta:
        table_name = "feed_icons"
        indexes = ((("feed", "icon"), True),)
        primary_key = CompositeKey("feed", "icon")
